swagger: "2.0"
info:
  description: "Proof of concept of an asset gateway to join OAX network. A user can submit KYC documents and then mint, burn fiat token via this asset gateway."
  version: "1.0.0"
  title: "OAX Asset Gateway POC"
  termsOfService: ""
  contact:
    email: "projectstallman@openanx.org"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:5000"
basePath: "/api/v1"
tags:
- name: "user"
- name: "operator"
- name: "client application"
schemes:
- "http"
paths:
  /users/sign-up:
    post:
      tags:
      - "user"
      summary: "Sign up new user"
      operationId: "signUpUser"
      produces:
      - "application/vnd.api+json"
      parameters:
      - in: "body"
        name: "body"
        description: "User Sign Up Info"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Successfully sign up user"
          schema:
            $ref: "#/definitions/UserInfo"
        400:
          description: "Input fields doesn't pass validation check"
          schema:
            $ref: "#/definitions/Errors"
  /users/sign-in:
    get:
      tags:
      - "user"
      summary: "Sign in existing user"
      operationId: "signInUser"
      produces:
      - "application/vnd.api+json"
      parameters:
      - name: "authorization"
        in: "header"
        description: "username:password hash for Basic Authorization, see https://docs.oracle.com/cd/E24191_01/common/tutorials/authn_http_basic.html for examples"
        required: true
        type: "string"
      - name: "authorization-ethereum-address"
        in: "header"
        description: "The ethereum address of the user for sign in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully sign in user"
        400:
          description: "Input fields doesn't pass validation check"
          schema:
            $ref: "#/definitions/Errors"
        401:
          description: "Sign in failed with wrong combination of email+password"
          schema:
            $ref: "#/definitions/Errors"
        403:
          description: "User is blocked from using the site"
          schema:
            $ref: "#/definitions/Errors"
  /client-applications:
    post:
      tags:
      - client application
      summary: Signed in user to register client application in auth server
      operationId: registerClientApplication
      produces:
      - application/vnd.api+json
      parameters:
      - name: authorization
        in: header
        description: user's username:password hash for Basic Authorization, see https://docs.oracle.com/cd/E24191_01/common/tutorials/authn_http_basic.html for examples
        required: true
        type: string
      - name: authorization-ethereum-address
        in: header
        description: The ethereum address of the user for sign in clear text
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: "#/definitions/ClientApplication"
      responses:
        200:
          description: "Successfully register client app in auth server"
        400:
          description: "Input fields doesn't pass validation check"
          schema:
            $ref: "#/definitions/Errors"
        401:
          description: "User sign in failed with wrong combination of email+password"
          schema:
            $ref: "#/definitions/Errors"
        403:
          description: "User is blocked from using the site"
          schema:
            $ref: "#/definitions/Errors"
  /users/authorize:
    get:
      tags:
      - "user"
      - "client application"
      operationId: authorizeClientApplication
      description: User to authorize client application
      parameters:
      - name: client_id
        in: query
        required: true
        type: string
      - name: reponse_type
        in: query
        type: string
        required: true
        enum:
        - code
      - name: redirect_uri
        in: query
        required: true
        type: string
        format: url
      responses:
        200:
          description: "Successfully create session to prepare for client app authorization"
        400:
          description: "Input fields doesn't pass validation check"
          schema:
            $ref: "#/definitions/Errors"
        401:
          description: "User sign in failed with wrong combination of email+password"
          schema:
            $ref: "#/definitions/Errors"
        403:
          description: "User is blocked from using the site"
          schema:
            $ref: "#/definitions/Errors"
  /deposit-requests:
    get:
      tags:
      - "user"
      - "operator"
      description: If the logged in user is an operator, this endpoint returns all deposit requests stored in the system; if not, only return what's submitted by this user.
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StoredDepositRequests"
        403:
          description: Status returned if the requestor is not logged in
          schema:
            $ref: "#/definitions/Errors"
  /withdrawal-requests:
    get:
      tags:
      - "user"
      - "operator"
      description: If the logged in user is an operator, this endpoint returns all withdrawal requests stored in the system; if not, only return what's submitted by this user.
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/StoredWithdrawalRequests"
        403:
          description: Status returned if the requestor is not logged in
          schema:
            $ref: "#/definitions/Errors"
definitions:
  User:
    type: object
    required: ["username", "password", "ethereumAddress"]
    properties:
      username:
        type: string
        format: email
      password:
        type: string
        format: password
      ethereumAddress:
        type: string
        description: The ethereum address owned by user and used when sign up & sign in
        example: 0x8069D07C5D0324E8a4fc086F44b7B832D841b0a7
  UserInfo:
    type: object
    required: ["data"]
    properties:
      data:
        type: object
        properties:
          type:
            type: string
            example: "users"
          attributes:
            type: object
            required: ["username", "ethereumAddress"]
            properties:
              username:
                type: string
                format: email
              ethereumAddress:
                type: string
                example: 0x8069D07C5D0324E8a4fc086F44b7B832D841b0a7
  ClientApplication:
    type: object
    required: ["name","id","secret"]
    properties:
      name:
        type: string
        example: asset_gateway_a
      id:
        type: string
        example: 23a2gswrf24
        description: random uuid to identify each client application
      secret:
        type: string
        format: password
  StoredDepositRequests:
    type: object
    required: ["data"]
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
              example: "depositRequests"
            attributes:
              type: object
              required: ["internalTransactionId","username","amount","dateCreated","status","ethereumAddress"]
              properties:
                internalTransactionId:
                  type: string
                  description: hash of the submitted deposit request txn onto to ethereum blockchain
                  example: "0x46e62c4a817b2702e43e2425c0e9edbd5c5e270710a174ec9db198a58af6d432"
                username:
                  description: Email of the user who's intended to deposit fiat onto the asset gateway. It's fetch based on the mapping of username->ethereumAddress saving in backend database.
                  type: string
                  format: email
                  example: abc@domain.com
                amount:
                  type: number
                  example: 100.19
                dateCreated:
                  type: integer
                  description: time in unix timestamp millisec, based on blockchain timestamp
                  example: 1510892268000
                status:
                  $ref: "#/definitions/DepositRequestStatus"
                ethereumAddress:
                  type: string
                  description: The ethereum address it's depositing the fiat token to
                  example: "0x8069D07C5D0324E8a4fc086F44b7B832D841b0a7"
  DepositRequestStatus:
    type: string
    description: All possible deposit request status is listed here
    enum:
    - DEPOSIT_REQUESTED
    - FIAT_RECEIVED
    - TOKEN_MINTED
    - TOKEN_TRANSFERRED
  StoredWithdrawalRequests:
    type: object
    required: ["data"]
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
              example: "withdrawalRequests"
            attributes:
              type: object
              required: ["internalTransactionId","username","amount","dateCreated", "status","ethereumAddress"]
              properties:
                internalTransactionId:
                  type: string
                  description: hash of the submitted deposit request txn onto to ethereum blockchain
                  example: "0x46e62c4a817b2702e43e2425c0e9edbd5c5e270710a174ec9db198a58af6d432"
                username:
                  description: Email of the user who's intended to deposit fiat onto the asset gateway. It's fetch based on the mapping of username->ethereumAddress saving in backend database.
                  type: string
                  format: email
                  example: abc@domain.com
                amount:
                  type: number
                  example: 100.19
                dateCreated:
                  type: integer
                  description: time in unix timestamp millisec, based on blockchain timestamp
                  example: 1510892268000
                status:
                  $ref: "#/definitions/WithdrawalRequestStatus"
                ethereumAddress:
                  type: string
                  description: The ethereum address it's depositing the fiat token to
                  example: "0x8069D07C5D0324E8a4fc086F44b7B832D841b0a7"
  WithdrawalRequestStatus:
    type: string
    description: All possible withdrawal request status is listed here
    enum:
    - WITHDRAWAL_REQUESTED
    - TOKEN_TRANSFERRED
    - TOKEN_WITHDRAWN
  Errors:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: "#/definitions/Error"
  Error:
    type: object
    required: ["title"]
    properties:
      id:
        type: string
        example: "000001"
      links:
        type: object
        properties:
          about:
            type: string
            example: "https://oax.org/asset-gateway/api/v1/error/000001"
      status:
        type: string
        example: "400"
      code:
        type: string
        example: 'oax.error.000001'
      title:
        type: string
        example: "error.email.invalid.format"
      detail:
        type: string
        example: 'error.email.invalid.format.detail'
      source:
        type: object
        properties:
          pointer:
            type: string
            example: "/data/attributes/email"
          parameter:
            type: string
            example: "email"
      meta:
        $ref: "#/definitions/Meta"
  Meta:
    type: object
externalDocs:
  description: "Find out more about OAX"
  url: "https://oax.org"